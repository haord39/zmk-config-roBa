#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        new_macro1: new_macro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp E &kp A &kp R &kp SPACE>;
            label = "NEW_MACRO1";
        };

        new_macro2: new_macro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp T &kp H &kp A &kp N &kp K &kp SPACE &kp Y &kp O &kp U &kp SPACE &kp F &kp O &kp R &kp SPACE &kp Y &kp O &kp U &kp R &kp SPACE>;
            label = "NEW_MACRO2";
        };

        new_macro3: new_macro3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp S &kp O &kp R &kp R &kp Y &kp SPACE &kp F &kp O &kp R &kp SPACE>;
            label = "NEW_MACRO3";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp W         &kp E         &kp R        &kp T                                       &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A       &kp S         &kp D         &kp F        &kp G    &kp AT            &kp AT_SIGN      &kp H        &kp J  &kp K      &lt 1 L  &lt 5 SQT
&kp LCTRL   &kp X         &kp C         &kp V        &kp B    &kp Q             &kp J            &kp N        &kp M  &kp COMMA  &kp DOT  &lt 6 SLASH
&kp LSHIFT  &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 SPACE  &lt 5 B  &lt 3 LSHIFT      &lt 3 RS(SPACE)  &lt 2 ENTER                             &kp BACKSPACE
            >;
        };

        Mouse {
            bindings = <
&kp F1     &kp F2              &kp F3            &kp F4               &kp F5                                  &kp RC(RS(SEMICOLON))  &mkp MB4         &mkp MB5           &mkp MB5            &kp MINUS
&kp F2     &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &kp LS(LG(S))     &trans      &trans    &kp H                  &mkp MB1         &mkp MB3           &mkp MB2            &kp SEMICOLON
&kp LCTRL  &kp LG(NUMBER_2)    &kp LG(NUMBER_3)  &kp LG(NUMBER_4)     &kp LG(NUMBER_5)  &trans      &trans    &kp LC(ESCAPE)         &kp RC(PAGE_UP)  &kp RC(PAGE_DOWN)  &kp RS(UNDERSCORE)  &kp RS(QUESTION)
&kp RCTRL  &kp LEFT_WIN        &kp LEFT_ALT      &trans               &trans            &trans      &mkp MB2  &kp LA(F4)                                                                     &kp F12
            >;
        };

        Number {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH          &kp DOLLAR     &kp PERCENT                            &kp LC(NUMBER_6)  &kp RS(NUMBER_7)  &kp RS(NUMBER_8)  &kp RS(NUMBER_9)  &kp EQUAL
&kp NUMBER_1     &kp NUMBER_2       &kp NUMBER_3      &kp NUMBER_4   &kp NUMBER_5   &trans      &trans      &kp NUMBER_6      &kp NUMBER_7      &kp NUMBER_8      &kp N9            &kp N0
&kp RCTRL        &kp RS(NUMBER_2)   &kp RS(NUMBER_7)  &kp RS(MINUS)  &kp RS(MINUS)  &trans      &trans      &kp RC(H)         &kp PLUS          &kp MINUS         &kp ASTERISK      &kp SLASH
&trans           &trans             &trans            &trans         &trans         &trans      &kp DELETE  &trans                                                                  &kp PIPE
            >;
        };

        reboot {
            bindings = <
&sys_reset   &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR   &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &bt BT_CLR
            >;
        };

        None {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Scroll {
            bindings = <
&kp RS(F11)  &trans                  &trans                  &trans                   &trans                      &trans  &trans     &kp RC(P)  &trans     &trans
&kp LS(S)    &kp RS(RC(LEFT_ARROW))  &kp RS(RC(UP_ARROW))    &kp RC(RS(RIGHT_ARROW))  &trans  &trans      &trans  &trans  &kp LC(B)  &kp LC(N)  &kp RC(F)  &trans
&kp LCTRL    &trans                  &kp RS(RC(DOWN_ARROW))  &trans                   &trans  &trans      &trans  &trans  &trans     &trans     &trans     &trans
&trans       &trans                  &trans                  &trans                   &trans  &trans      &kp J   &kp K                                    &trans
            >;
        };

        Special {
            bindings = <
&trans  &trans       &trans       &trans       &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &new_macro1  &new_macro2  &new_macro3  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans       &trans       &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans       &trans       &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
