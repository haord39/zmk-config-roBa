#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp W         &kp E         &kp R        &kp T                                               &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A       &kp S         &kp D         &kp F        &kp G  &kp AT            &kp AT_SIGN                &kp H        &kp J  &kp K      &lt 1 L  &lt 5 COLON
&kp LCTRL   &kp X         &kp C         &kp V        &kp B  &kp Q             &kp J                      &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LSHIFT  &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 SPACE  &kp B  &lt 5 LSHIFT      &lt 4 LANG_ZENKAKUHANKAKU  &lt 2 ENTER                             &kp BACKSPACE
            >;
        };

        Mouse {
            bindings = <
&kp F1     &kp F2              &kp F3            &kp F4               &kp F5                                  &kp RC(RS(SEMICOLON))  &kp RC(MINUS)    &mkp MB4           &mkp MB5        &kp MINUS
&kp F2     &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &kp LS(LG(S))     &trans      &trans    &kp H                  &mkp MB1         &mkp MB3           &mkp MB2        &kp SEMICOLON
&kp LCTRL  &kp LG(NUMBER_2)    &kp LG(NUMBER_3)  &kp LG(NUMBER_4)     &kp LG(NUMBER_5)  &trans      &trans    &kp LC(ESCAPE)         &kp RC(PAGE_UP)  &kp RC(PAGE_DOWN)  &kp UNDERSCORE  &kp RS(QUESTION)
&kp RCTRL  &kp LEFT_WIN        &kp LEFT_ALT      &trans               &trans            &trans      &mkp MB2  &kp LA(F4)                                                                 &kp F12
            >;
        };

        Number {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH      &kp DOLLAR    &kp PERCENT                                                &kp AMPERSAND  &kp SQT       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LCTRL
&kp NUMBER_1     &kp NUMBER_2       &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp NUMBER_6   &kp NUMBER_7  &kp NUMBER_8          &kp N9                 &kp N0
&kp RCTRL        &kp DOUBLE_QUOTES  &kp SQT       &kp EQUAL     &kp EQUAL     &kp EQUAL                    &trans          &kp RC(H)      &kp PLUS      &kp MINUS             &kp ASTERISK           &kp SLASH
&trans           &trans             &trans        &trans        &trans        &trans                       &kp DELETE      &trans                                                                    &kp PIPE
            >;
        };

        Scroll {
            bindings = <
&kp RS(F11)  &trans                  &trans                  &trans                   &trans                      &trans  &trans     &kp RC(P)  &trans     &trans
&kp LS(S)    &kp RS(RC(LEFT_ARROW))  &kp RS(RC(UP_ARROW))    &kp RC(RS(RIGHT_ARROW))  &trans  &trans      &trans  &trans  &kp LC(B)  &kp LC(N)  &kp RC(F)  &trans
&trans       &trans                  &kp RS(RC(DOWN_ARROW))  &trans                   &trans  &trans      &trans  &trans  &trans     &trans     &trans     &trans
&trans       &trans                  &trans                  &trans                   &trans  &trans      &kp J   &kp K                                    &trans
            >;
        };

        Special {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Scrolll {
            bindings = <
&sys_reset   &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
